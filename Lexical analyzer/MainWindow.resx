<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>